# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = /opt/gtest-1.7.0

# Where to find user code.
USER_DIR = .

# Where to find user code.
SRC_DIR = ../src

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include -I/usr/local/include -I../../../include/trade -L/usr/local/lib -ljson_linux-gcc-4.4.7_libmt -lboost_thread -lTradeInterfaceSDK -lssl -lcrypto

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread -DJSON_HAS_INT64

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
#TESTS = sample1_unittest config_test  proc_thread_test
TESTS = config_test proc_thread_select_test gd_trade_test recv_thread_test user_request_buffer_test xn_mutex_test

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

#sample1.o : $(USER_DIR)/sample1.cc $(USER_DIR)/sample1.h $(GTEST_HEADERS)
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/sample1.cc

#sample1_unittest.o : $(USER_DIR)/sample1_unittest.cc \
                     $(USER_DIR)/sample1.h $(GTEST_HEADERS)
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/sample1_unittest.cc

#sample1_unittest : sample1.o sample1_unittest.o gtest_main.a
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

config_test : config.o config_test.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

config_test.o : $(USER_DIR)/config_test.cc $(SRC_DIR)/config.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/config_test.cc

config.o : $(SRC_DIR)/config.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(SRC_DIR)/config.cpp


proc_thread_test : proc_thread.o proc_thread_test.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

proc_thread_test.o : $(USER_DIR)/proc_thread_test.cc $(SRC_DIR)/proc_thread.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/proc_thread_test.cc

proc_thread.o : $(SRC_DIR)/proc_thread.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(SRC_DIR)/proc_thread.cpp



proc_thread_select_test : proc_thread_select.o proc_thread_select_test.o xn_mutex.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

proc_thread_select_test.o : $(USER_DIR)/proc_thread_select_test.cc $(SRC_DIR)/proc_thread.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/proc_thread_select_test.cc

proc_thread_select.o : $(SRC_DIR)/proc_thread_select.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(SRC_DIR)/proc_thread_select.cpp


gd_trade_test : gd_trade.o gd_trade_test.o xn_mutex.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

gd_trade_test.o : $(USER_DIR)/gd_trade_test.cc $(SRC_DIR)/gd_trade.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/gd_trade_test.cc

gd_trade.o : $(SRC_DIR)/gd_trade.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(SRC_DIR)/gd_trade.cpp


recv_thread_test : recv_thread.o recv_thread_test.o xn_mutex.o proc_thread_select.o proc_thread.o user_request_buffer.o gd_trade.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

recv_thread_test.o : $(USER_DIR)/recv_thread_test.cc $(SRC_DIR)/recv_thread.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/recv_thread_test.cc

recv_thread.o : $(SRC_DIR)/recv_thread.h  $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(SRC_DIR)/recv_thread.cpp

user_request_buffer_test : user_request_buffer.o user_request_buffer_test.o xn_mutex.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

user_request_buffer_test.o : $(USER_DIR)/user_request_buffer_test.cc $(SRC_DIR)/user_request_buffer.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/user_request_buffer_test.cc

user_request_buffer.o : $(SRC_DIR)/user_request_buffer.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(SRC_DIR)/user_request_buffer.cpp


xn_mutex_test : xn_mutex_test.o xn_mutex.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

xn_mutex_test.o : $(USER_DIR)/xn_mutex_test.cc $(SRC_DIR)/xn_mutex.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/xn_mutex_test.cc

xn_mutex.o : $(SRC_DIR)/xn_mutex.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(SRC_DIR)/xn_mutex.cpp



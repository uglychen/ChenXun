#ifndef _PROC_THREAD_418B568F_E3CF_4A78_8D8C_9EA9CC38C293_
#define _PROC_THREAD_418B568F_E3CF_4A78_8D8C_9EA9CC38C293_
#include "gd_trade.h"
#include "xn_mutex.h"
#include "struct.h"
#include "user_request_buffer.h"
#include <boost/unordered_map.hpp>
#include <jsoncpp/json.h>
#include "proc_task.h"
#include "trade_producer.h"

/***************************************************************************************************************************/
//字符和类型转换
/***************************************************************************************************************************/
class request_type2int
{
private:
	request_type2int() {}
public:
	bool init();

	int get_type(const std::string&);
private:
	boost::unordered_map<std::string, int> _string2int;

	friend request_type2int& g_request_type2int();
};

request_type2int& g_request_type2int();

class proc_thread_container;
/***************************************************************************************************************************/
//接收线程数据管理类
/***************************************************************************************************************************/
class proc_thread : public gd_trade_callback
{
private:
	proc_thread();
public:
	~proc_thread();

	/***************************************************************************************************************************/
	//初始化
	/***************************************************************************************************************************/
	bool init();
	/***************************************************************************************************************************/
	//销毁
	/***************************************************************************************************************************/
	void destory();
	/***************************************************************************************************************************/
	//销毁
	/***************************************************************************************************************************/
	pthread_t get_pthread_id() const { return _thread_id; }
	/***************************************************************************************************************************/
	//销毁
	/***************************************************************************************************************************/
	virtual void on_callback_task(boost::shared_ptr<proc_task>& ptr_task);
private:
	/***************************************************************************************************************************/
	//处理线程
	/***************************************************************************************************************************/
	static void* proc_thread_func(void *param);

	/***************************************************************************************************************************/
	//判断是否有效
	/***************************************************************************************************************************/
	void check_active();

	/***************************************************************************************************************************/
	//处理请求
	/***************************************************************************************************************************/
	void process_request(const request_task* ptr_request);
	void process_callback(const callback_task* ptr_request);
	/***************************************************************************************************************************/
	//请求分类
	/***************************************************************************************************************************/
	bool request_type(gd_trade* ptr_trade, const request_task & request, Json::Value& response);
	/***************************************************************************************************************************/
	//分配个新类
	/***************************************************************************************************************************/
	gd_trade* get_trade_from_store();
	/***************************************************************************************************************************/
	//对已经连接的interface发送心跳
	/***************************************************************************************************************************/
	void heart_beat();

	
private:
	/***************************************************************************************************************************/
	//线程用户队列 
	/***************************************************************************************************************************/
	boost::unordered_map<std::string, gd_trade*> _user_interface_map;
	/***************************************************************************************************************************/
	//用户对象池
	/***************************************************************************************************************************/
	std::vector<gd_trade*> _user_interface_store;
	/***************************************************************************************************************************/
	//用户对象池最大容量
	/***************************************************************************************************************************/
	unsigned long _max_capacity;
	/***************************************************************************************************************************/
	//用户对象池最大容量
	/***************************************************************************************************************************/
	unsigned long _init_capacity;
	/***************************************************************************************************************************/
	//线程用户队列 
	/***************************************************************************************************************************/
	xn_mutex _user_interface_mutex;

	/***************************************************************************************************************************/
	//检查间隔
	/***************************************************************************************************************************/
	pthread_t _thread_id;
	/***************************************************************************************************************************/
	//是否运作
	/***************************************************************************************************************************/
	volatile bool _run;


	/***************************************************************************************************************************/
	//最后巡检时间
	/***************************************************************************************************************************/
	time_t _last_check_time;
	int _check_time_interval;

	/***************************************************************************************************************************/
	//心跳设置
	/***************************************************************************************************************************/
	time_t _last_heart_beat_time;
	int _heart_beat_interval;

	/***************************************************************************************************************************/
	//心跳设置
	/***************************************************************************************************************************/
	activemq_trade_producer _ptr_producer;

public:
	/***************************************************************************************************************************/
	//用户请求队列 
	/***************************************************************************************************************************/
	user_request_buffer _request_buffer;

	friend class proc_thread_container;
};

/***************************************************************************************************************************/
//用户请求队列 
/***************************************************************************************************************************/
class proc_thread_container
{
private:
	proc_thread_container() {}

public:
	~proc_thread_container() {}
	/***************************************************************************************************************************/
	//由线程id获取处理线程实例
	/***************************************************************************************************************************/
	proc_thread* get_thread(pthread_t id);
	/***************************************************************************************************************************/
	//添加一个处理线程
	/***************************************************************************************************************************/
	bool add_thread();
	/***************************************************************************************************************************/
	//销毁 
	/***************************************************************************************************************************/
	void destory();

private:
	std::map<pthread_t, proc_thread*> _container;

	friend proc_thread_container& g_proc_thread_container();
};

proc_thread_container& g_proc_thread_container();

#endif








